package main

import (
	"log"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	"ScriptByBit/help"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env
	if err := godotenv.Load("case.env"); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env:", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dsn := os.Getenv("DB_DSN")
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	sqlDB, _ := db.DB()
	defer sqlDB.Close()
	if err := sqlDB.Ping(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ ping –∫ –ë–î:", err)
	}
	log.Println("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
	telegramBot, err := help.NewTelegramBot(token)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–∞:", err)
	}

	// üõ† –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if _, err := telegramBot.API.Request(tgbotapi.DeleteWebhookConfig{
		DropPendingUpdates: true,
	}); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î –≥–ª–æ–±–∞–ª—å–Ω–æ
	help.DbGlobal = db

	// –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –±–æ—Ç–∞
	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("[PANIC] –≤ StartListening: %v", r)
			}
		}()
		log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
		telegramBot.StartListening()
	}()

	select {} // –±–ª–æ–∫–∏—Ä—É–µ–º main-–ø–æ—Ç–æ–∫
}
